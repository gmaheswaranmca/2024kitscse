RDBMS   
    SQL 
    Vendors: MySQL, SQL Server, Oracle, Postgres, Sqlite 
    database
        table (fixed columns/schema, constraints)
            row 
        relation
            constraints
                primary key, foreign key 
                unique key, not null, check 
    Example for normalized / referencial data model
        order_bill: id, bill_number, date, amount, tax_amount, net_amount
        order_items: id, order_bill_id, item_id, qty, price

        id of order_bill is primary key 
        bill_number of order_bill is unique key 
        id of order_item is primary key 
        order_bill_id is the foreign key references order_bill:id
        item_id is the foreign key references item:id
mongo db - noSQL
    database 
        collection
            document
    data models: 
        1. hierarchical data model 
        2. referncial / normalized / relational data model 
    
    hierarchical data model    
        order_bill: { id, bill_number, date, 
                    amount, tax_amount,    net_amount,
                    order_items: [{id, item_id, qty, price}]
                }
        Here, order_items is an attribute of the order_bill doc 
--- --- --- 
softwares: mongo db | sqlite 
--- --- --- 
    sample:
        database:   emp_db 
        collection: emps
            [
                {name:'dravid',sal:20000},
                {name:'rohit',sal:30000},
                {name:'dhoni',sal:25000}
            ]
        CRUD operations
            Create : Add Employee 
            Read   
                Read One  : Edit Employee 
                Read All  : List Employees 
            Update        : To update the edited employee 
            Delete        : Delete one employee 
    vendor_search_db 
        vendors 
        users 

        CRUD operation on vendors
    trainer_search_db 
        assignment, you are developing the trainer search app. 
------------------------------------
default port number for mongo Server
    27017
------------------------------------
note: mongo compass has built in shell 
------------------------------------
test>show dbs           #list databases 
to create database 
test>use emp_db         #if no emp_db, the emp_db will be created. or switched to emp_db.
emp_db>db.emps.insertOne({name:'dravid',salary:20000})
# if emps collection not exist, the collection 'emps' is created 
  and added the dravid document into emps collection.
emp_db>db.emps.find()   
#queries all the emps documents 
emp_db>db.emps.insertMany(
    [
        {name:'rohit',salary:30000},
        {name:'dhoni',salary:25000}
    ]
)
emp_db>db.emps.find()                   #queries all the employees 
emp_db>db.emps.find({name:'dravid'})    #queried only dravid but as "array of one doc" 
emp_db>db.emps.insertOne({name:'gambhir',salary:50000})
emp_db>db.emps.find({name:'gambhir'})   #queried gambhir doc 
emp_db>db.emps.updateOne({name:'gambhir'},{$set{salary:60000}}) #update gambhir salary as 60000
emp_db>db.emps.find({name:'gambhir'})
emp_db>db.emps.deleteOne({name:'gambhir'})  #to delete the gambhir doc 
emp_db>db.emps.find({name:'gambhir'})       #to check gambhir deleted or not, raise the query 
--- --- --- --- --- --- 
In app, 
    go to vendor_search_db folder 
        go to description.txt
            find the fields for 
            tables/collections 
            vendors and users

vedor type: 1 - corporate, 2 - crt, 3 - institute

0.1 create database 
database: vendor_search_db 

tables/collections:
vendors: 10
id, name, employee_name, management_person_name, place, type, ratings, 
phone_number1 phone_number2, email, address, pan_number, gst_number, website

users: 3
id, name, password










Practical:
use vendor_search_db 
1. Create 3 users 
db.users.insertMany(
    [
        {name:'anilkumar', password:'1234'},
        {name:'sivasai', password:'5678'},
        {name:'sailakshmi', password:'5432'}
    ]
)
2. Create 10 vendors 
db.vendors.insertMany(
    [
        {
         name:'bytexl', employee_name:'ramesh', 
         management_person_name:'sathis', 
         place:'hyderabad', type:2, ratings:4, 
         phone_number1:'9745322111',
         phone_number2:'', 
         email:'info@bytexl.com', 
         address:'', 
         pan_number:'XYZ123', gst_number:'ABC456', 
         website:'bytexl.com'
         },
         {
         name:'ebox', employee_name:'sohail', 
         management_person_name:'sadhik', 
         place:'coimbatore', type:1, ratings:3, 
         phone_number1:'7778882233',
         phone_number2:'', 
         email:'info@ebox.com', 
         address:'', 
         pan_number:'TZE123', gst_number:'BBX456', 
         website:'ebox.com'
         }
    ]
)

3. Try to update one user password 
4. Try to update one vendor employee_name  
5. Delete one vendor 
6. Query the vendors based on place 
db.vendors.find({'place':'hyderabad'})
7. Query the vendors based on type
db.vendors.find({'type':1})
8. Query the vendors based on ratings
 db.vendors.find({'ratings':4})
9. Query the vendors based on name
db.vendors.find({'name':'ebox'})
10. update multiple vendor's place name 
by quering place name only 
--------------------------------------------------
sqlite:
    sofware: "DB Browser for SQLite"
--------------------------------------------------
SQL 
    - DDL - table,view,procedure,trigger
        CREATE TABLE    - table creation
        ALTER TABLE     - add columns, edit cols, add constraints
        DROP TABLE      - remove table from db 

        TRUCATE TABLE   - purge data, reset to struct  
    - DML   / DQL
        INSERT      - add row into table 
        UPDATE      - edit row 
        DELETE      - delete row 
        SELECT      - query ................
    - TCL (transaction - ACID)
        BEGIN TRANSACTION   - to let the db session bundle activies started 
        COMMIT              - to let db the activities shoud be updated to the db 
                                - completion 
        ROLLBACK            - reverse all the activies to previous state 
                                - rejection
        SAVEPOINT           - to set point from which we do commit / rollback 
    - DCL (data)
        GRANT 
            grant <privileges> on emp_db to 'user1'@'localhost';
                privileges: INSERT,UPDATE,DELETE,SELECT, 
                            CREATE,ALTER,DROP, GRANT 
        REVOKE 
            revoke <privileges> on emp_db from 'user1'@'localhost';  
--------------------------------------------------
dept: id, name  
    1 batting
    2 bowling
    3 wicket keeping 
emp: id, name, salary, dept_id, bonus 
         rohit, 100000, 1, 40000
         kohli, 125000, 1, 35000
         pant,  75000, 3, 55000
         surya, 120000, 1, 10000
         dube, 60000, 1, 20000
         pandiya, 95000, 2, 15000
         jadeja, 55000, 2, 20000
         axar, 70000, 2, 13000
         bumrah, 200000, 2, 75000
         arsheep, 75000, 2, 60000
         kuldeep, 50000, 2, 30000
--------------------------------------------------
CREATE TABLE dept (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name VARCHAR(50) not null
);

INSERT INTO dept(name) 
	values('batting');
INSERT INTO dept(name) 
	values('bowling'),('wicket keeping');
	
DESC dept; -- not working

SELECT * FROM dept;

INSERT INTO emp(name, salary, dept_id, bonus)
    VALUES ('rohit', 100000, 1, 40000), ('kohli', 125000, 1, 35000),
         ('pant',  75000, 3, 55000),  ('surya', 120000, 1, 10000),
         ('dube', 60000, 1, 20000), ('pandiya', 95000, 2, 15000),
         ('jadeja', 55000, 2, 20000),('axar', 70000, 2, 13000),
         ('bumrah', 200000, 2, 75000),('arsheep', 75000, 2, 60000),
         ('kuldeep', 50000, 2, 30000);
		 
SELECT * FROM emp;		 



CREATE TABLE emp (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name VARCHAR(255) not null,
    salary FLOAT not null,
    dept_id INTEGER,
    bonus FLOAT not null,
	CONSTRAINT emp_dept_id_dept_id FOREIGN KEY(dept_id) REFERENCES dept(id)
);         
--------------------------------------------------       








